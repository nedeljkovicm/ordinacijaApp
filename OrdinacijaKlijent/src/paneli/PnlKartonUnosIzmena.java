/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paneli;

import domen.Karton;
import domen.KrvnaGrupa;
import domen.OpstaDomenskaKlasa;
import forme.FrmDialog;
import forme.FrmForma;
import forme.FrmMod;
import forme.GlavnaForma;
import forme.IPanel;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import kontroler.Kontroler;

/**
 *
 * @author minna
 */
public class PnlKartonUnosIzmena extends javax.swing.JPanel implements IPanel{

    private FrmMod model;
    
    /**
     * Creates new form PnlKartonUnos
     */
    public PnlKartonUnosIzmena(FrmMod model) {
        initComponents();
        spremiFormu(model);
        napuniCombo();
        
    }

  
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel13 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtNapomene = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnIzmeni = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnSacuvaj = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cmbKrvnaGrupa = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        dpDatumRodj = new datechooser.beans.DateChooserCombo();
        jLabel8 = new javax.swing.JLabel();
        dpDatPrvi = new datechooser.beans.DateChooserCombo();
        jLabel9 = new javax.swing.JLabel();
        dpDatPoslednji = new datechooser.beans.DateChooserCombo();
        jLabel10 = new javax.swing.JLabel();
        txtJMBG = new javax.swing.JTextField();
        txtPrezime = new javax.swing.JTextField();
        txtIme = new javax.swing.JTextField();
        txtTelefon = new javax.swing.JTextField();
        txtZanimanje = new javax.swing.JTextField();
        txtLBO = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAlergije = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDijagnoza = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel13.setText("Napomene:");

        jLabel2.setText("Prezime:");

        txtNapomene.setColumns(20);
        txtNapomene.setRows(5);
        jScrollPane3.setViewportView(txtNapomene);

        jLabel3.setText("Ime:");

        jLabel4.setText("Kontakt telefon:");

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        jLabel5.setText("Datum rodjenja:");

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        jLabel6.setText("Krvna grupa:");

        cmbKrvnaGrupa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Zanimanje:");

        jLabel8.setText("Prvi pregled:");

        jLabel9.setText("Poslednji pregled:");

        jLabel10.setText("LBO:");

        txtIme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtImeActionPerformed(evt);
            }
        });

        jLabel11.setText("Alergije:");

        txtAlergije.setColumns(20);
        txtAlergije.setRows(5);
        jScrollPane1.setViewportView(txtAlergije);

        jLabel12.setText("Dijagnoza:");

        txtDijagnoza.setColumns(20);
        txtDijagnoza.setRows(5);
        jScrollPane2.setViewportView(txtDijagnoza);

        jLabel1.setText("JMBG:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtJMBG)
                    .addComponent(txtPrezime)
                    .addComponent(txtIme)
                    .addComponent(txtTelefon)
                    .addComponent(txtZanimanje)
                    .addComponent(txtLBO)
                    .addComponent(cmbKrvnaGrupa, 0, 223, Short.MAX_VALUE)
                    .addComponent(dpDatumRodj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dpDatPrvi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dpDatPoslednji, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnIzmeni, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSacuvaj, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(dpDatumRodj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cmbKrvnaGrupa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtZanimanje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dpDatPrvi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(dpDatPoslednji, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtLBO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnIzmeni)
                            .addComponent(btnSacuvaj))))
                .addContainerGap(70, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed

        String JMBG= txtJMBG.getText();
        String prezime= txtPrezime.getText();
        String ime= txtIme.getText();
        String kontaktTel= txtTelefon.getText();
        KrvnaGrupa kGrupa= (KrvnaGrupa) cmbKrvnaGrupa.getSelectedItem();
        String zanimanje= txtZanimanje.getText();
        String LBO= txtLBO.getText();
        String alergije= txtAlergije.getText();
        String dijagnoza= txtDijagnoza.getText();
        String napomene= txtNapomene.getText();

        Date datumRodj = new Date();
        Date datumPrviPregled= new Date();
        Date datumPoslPregled= new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            datumRodj = java.sql.Date.valueOf(sdf.format(dpDatumRodj.getSelectedDate().getTime()));
            datumPrviPregled = java.sql.Date.valueOf(sdf.format(dpDatPrvi.getSelectedDate().getTime()));
            datumPoslPregled = java.sql.Date.valueOf(sdf.format(dpDatPoslednji.getSelectedDate().getTime()));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Morate uneti trazene datume!");
            return;

        }

        boolean val= validacija(-1,JMBG,prezime,ime,kontaktTel,kGrupa,zanimanje,LBO,alergije,dijagnoza,napomene,datumRodj,datumPrviPregled,datumPoslPregled);

        if (val) {
            Karton k = new Karton(0, JMBG, prezime, ime, kontaktTel, datumRodj, kGrupa, zanimanje, datumPrviPregled, datumPoslPregled, LBO, dijagnoza, alergije, napomene);
            //System.out.println(karton);
            try {
                String poruka = Kontroler.getInstanca().unesiKarton(k);
                JOptionPane.showMessageDialog(this, poruka);
                sesija.Sesija.getInstanca().getMapa().put("trenutniKarton", k);
               ((FrmDialog) SwingUtilities.getWindowAncestor(this)).dispose();
               
                if (((SwingUtilities.getWindowAncestor((FrmDialog) SwingUtilities.getWindowAncestor(this)))) instanceof GlavnaForma) {
                    return;
                }
                
                (((FrmForma) SwingUtilities.getWindowAncestor((FrmDialog) SwingUtilities.getWindowAncestor(this)))).getPanel().popuniPodatke();
                
            } catch (NullPointerException e) {
                System.out.println("Greska - cuvanje");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Neuspesno cuvanje");
                Logger.getLogger(PnlKartonUnosIzmena.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void txtImeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtImeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtImeActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
       
        String JMBG= txtJMBG.getText();
        String prezime= txtPrezime.getText();
        String ime= txtIme.getText();
        String kontaktTel= txtTelefon.getText();
        KrvnaGrupa kGrupa= (KrvnaGrupa) cmbKrvnaGrupa.getSelectedItem();
        String zanimanje= txtZanimanje.getText();
        String LBO= txtLBO.getText();
        String alergije= txtAlergije.getText();
        String dijagnoza= txtDijagnoza.getText();
        String napomene= txtNapomene.getText();
        Date datumRodj = new Date();
        Date datumPrviPregled= new Date();
        Date datumPoslPregled= new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        datumRodj = java.sql.Date.valueOf(sdf.format(dpDatumRodj.getSelectedDate().getTime()));
        datumPrviPregled = java.sql.Date.valueOf(sdf.format(dpDatPrvi.getSelectedDate().getTime()));
        datumPoslPregled = java.sql.Date.valueOf(sdf.format(dpDatPoslednji.getSelectedDate().getTime()));
        
        int id = ((Karton) sesija.Sesija.getInstanca().getMapa().get("trenutniKarton")).getKartonID();
        
        boolean val= validacija(id,JMBG,prezime,ime,kontaktTel,kGrupa,zanimanje,LBO,alergije,dijagnoza,napomene,datumRodj,datumPrviPregled,datumPoslPregled);
        if (val) {
            Karton k = new Karton(id, JMBG, prezime, ime, kontaktTel, datumRodj, kGrupa, zanimanje, datumPrviPregled, datumPoslPregled, LBO, dijagnoza, alergije, napomene);
            System.out.println(k);
            try {
                String poruka = Kontroler.getInstanca().izmeniKarton(k);
                System.out.println(poruka);
                JOptionPane.showMessageDialog(this, poruka);
                sesija.Sesija.getInstanca().getMapa().put("trenutniKarton", k);
                ((FrmDialog) SwingUtilities.getWindowAncestor(this)).dispose();
                  if (((SwingUtilities.getWindowAncestor((FrmDialog) SwingUtilities.getWindowAncestor(this)))) instanceof GlavnaForma) {
                    return;
                }
                (((FrmForma) SwingUtilities.getWindowAncestor((FrmDialog) SwingUtilities.getWindowAncestor(this)))).getPanel().popuniPodatke();  
            } catch (NullPointerException e) {
                 System.out.println("Greska - izmena");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Neuspesna izmena");
                Logger.getLogger(PnlKartonUnosIzmena.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
        
        
    }//GEN-LAST:event_btnIzmeniActionPerformed

    public FrmMod getModel() {
        return model;
    }

    public void setModel(FrmMod model) {
        this.model = model;
    }

    private void spremiFormu(FrmMod model) {
         switch (model) {
            case unos:
                this.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Unos novog kartona pacijenta",TitledBorder.LEFT, TitledBorder.TOP));
                btnSacuvaj.setVisible(true);
                btnIzmeni.setVisible(false);
                break;
            case izmena:
                this.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Izmena kartona pacijenta",TitledBorder.LEFT, TitledBorder.TOP));
                btnSacuvaj.setVisible(false);
                btnIzmeni.setVisible(true);
                popuniPolja(sesija.Sesija.getInstanca().getMapa().get("trenutniKarton"));
                break;
            case pregled:
                this.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Karton pacijenta",TitledBorder.LEFT, TitledBorder.TOP));
                popuniPolja(sesija.Sesija.getInstanca().getMapa().get("trenutniKarton"));
                btnSacuvaj.setVisible(false);
                btnIzmeni.setVisible(false);
                txtJMBG.setEditable(false);
                txtPrezime.setEditable(false);
                txtIme.setEditable(false);
                txtTelefon.setEditable(false);
                txtZanimanje.setEditable(false);
                txtLBO.setEditable(false);
                txtDijagnoza.setEditable(false);
                txtAlergije.setEditable(false);
                txtNapomene.setEditable(false);
                dpDatumRodj.setEnabled(false);
                dpDatPrvi.setEnabled(false);
                dpDatPoslednji.setEnabled(false);
                cmbKrvnaGrupa.setEnabled(false);
                

        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox cmbKrvnaGrupa;
    private datechooser.beans.DateChooserCombo dpDatPoslednji;
    private datechooser.beans.DateChooserCombo dpDatPrvi;
    private datechooser.beans.DateChooserCombo dpDatumRodj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtAlergije;
    private javax.swing.JTextArea txtDijagnoza;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtJMBG;
    private javax.swing.JTextField txtLBO;
    private javax.swing.JTextArea txtNapomene;
    private javax.swing.JTextField txtPrezime;
    private javax.swing.JTextField txtTelefon;
    private javax.swing.JTextField txtZanimanje;
    // End of variables declaration//GEN-END:variables

    private boolean validacija(int id,String JMBG, String prezime, String ime, String kontaktTel, KrvnaGrupa kGrupa, String zanimanje, String LBO, String alergije, String dijagnoza, String napomene, Date datumRodj, Date datumPrviPregled, Date datumPoslPregled) {
         if (JMBG.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate uneti JMBG!");
            return false;

        }
         
         String regex = "[0-9]+";

        if (!(JMBG.matches(regex))) {
            JOptionPane.showMessageDialog(this, "Pogresan format za JMBG!");
            return false;
        }
        if (JMBG.length() != 13) {
            JOptionPane.showMessageDialog(this, "Pogresan format za JMBG!");
            return false;
        }
        
         boolean postojiJMBG=proveriJMBG(id,JMBG);
            
        if (postojiJMBG) {
           JOptionPane.showMessageDialog(this, "JMBG vec postoji!");
           return false;
        }
         
         
          if (prezime.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate uneti prezime!");
            return false;

        }
         
         if (ime.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate uneti ime!");
            return false;
        }
        
         if (kontaktTel.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate uneti kontakt telefon!");
            return false;
        }
        
         if (LBO.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate uneti LBO!");
            return false;
         }
            
         boolean postojiLBO=proveriLBO(id,LBO);
            
        if (postojiLBO) {
           JOptionPane.showMessageDialog(this, "LBO vec postoji!");
           return false;
        }
        
        if (datumPrviPregled.after(datumPoslPregled)) {
            JOptionPane.showMessageDialog(this, "Poslednji pregled ne moze biti pre prvog!");
            return false;
        }
        return true;
    }

    private void napuniCombo() {
        
        cmbKrvnaGrupa.setModel(new DefaultComboBoxModel(KrvnaGrupa.values()));
        
    }

    public void popuniPolja(OpstaDomenskaKlasa odk) {
        Karton k = (Karton) odk;
        txtJMBG.setText(k.getJMBG());
        txtPrezime.setText(k.getPrezime());
        txtIme.setText(k.getIme());
        txtTelefon.setText(k.getKontaktTelefon());
        txtZanimanje.setText(k.getZanimanje());
        txtLBO.setText(k.getLBO());
        txtDijagnoza.setText(k.getDijagnoza());
        txtAlergije.setText(k.getAlergije());
        txtNapomene.setText(k.getNapomene());
        cmbKrvnaGrupa.setSelectedItem(k.getKg());
        
        GregorianCalendar gcRodj = new GregorianCalendar();
        gcRodj.setTime(k.getDatumRodjenja());
        dpDatumRodj.setSelectedDate(gcRodj);
        
        GregorianCalendar gcPrvi = new GregorianCalendar();
        gcPrvi.setTime(k.getPrviPregled());
        dpDatPrvi.setSelectedDate(gcPrvi);
        
        GregorianCalendar gcPosl = new GregorianCalendar();
        gcPosl.setTime(k.getPoslednjiPregled());
        dpDatPoslednji.setSelectedDate(gcPosl);
      
    }

    private boolean proveriLBO(int id,String LBO) {
       
        try {
            List<Karton> lista = kontroler.Kontroler.getInstanca().vratiSveKartone();
            for (Karton k : lista) {
                if(k.getLBO() == null ? LBO == null : k.getLBO().equals(LBO) && k.getKartonID()!=id)
                    return true;
            }
           
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
//            Logger.getLogger(PnlKartonUnosIzmena.class.getName()).log(Level.SEVERE, null, ex);
        }  
        
        return false;
    }

    private boolean proveriJMBG(int id,String JMBG) {
        try {
            List<Karton> lista = kontroler.Kontroler.getInstanca().vratiSveKartone();
            for (Karton k : lista) {
                if(k.getJMBG()== null ? JMBG == null : k.getJMBG().equals(JMBG) && k.getKartonID()!=id)
                    return true;
            }
           
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
//            Logger.getLogger(PnlKartonUnosIzmena.class.getName()).log(Level.SEVERE, null, ex);
        }  
        
        return false;
    }
}
